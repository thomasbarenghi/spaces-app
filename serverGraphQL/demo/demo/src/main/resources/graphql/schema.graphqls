type Users {
  id: ID
  firstName: String
  lastName: String
  email: String
  password: String
  loginMethod: String
  username: String
  createdAt: String
  updatedAt: String
  softDelete: Boolean
  isSuperAdmin: Boolean
  coverImage: String
  profileImage: String
  spaces: [Spaces]
}

type Comments {
  id: ID
  content: String
  fromUser: Users
  createdAt: String
  updatedAt: String
}

type Spaces {
  id: ID
  name: String
  description: String
  accessCode: String
  # coverImage: String
  coverImage: String
  members: [Members]
  rooms: [Rooms]
  files: [Files]
  chat: Chat
  createdAt: String
  updatedAt: String
}

type Rooms {
  id: ID
  name: String
  description: String
  spaceOwner: Spaces
  tasks: [Tasks]
  coverImage: String
  createdAt: String
  updatedAt: String
}

type Files {
  id: ID
  name: String
  description: String
  src: String
  owner: Users
  createdAt: String
  updatedAt: String
}

type Tasks {
  id: ID
  title: String
  description: String
  longDescription: String
  status: String
  deadline: String
  assignedTo: [Members]
  createdAt: String
  updatedAt: String
  comments: [Comments]
}

type Members {
  user: Users
  role: String
}

type Sessions {
  id: ID
  originalSessionId: String
  expireAt: String
  userId: String
  userEmail: String
}

type Chat {
  id: ID
  messages: [Messages]
  createdAt: String
  updatedAt: String
}

type Messages {
  id: ID
  fromUser: Users
  content: String
  createdAt: String
  updatedAt: String
}

type File {
  lastModified: Int
  name: String
  size: Int
  type: String
  webkitRelativePath: String
}

type Query {
  findAllUsers: [Users]
  findUserById(id: ID): Users
  findSpaceById(id: ID): Spaces
  findRoomById(id: ID): Rooms
  findTaskById(taskId: ID, roomId: ID): Tasks
  verifySession(userId: ID): Boolean
}

type Mutation {
  createUser(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    loginMethod: String
    username: String!
    profileImage: String
    isSuperAdmin: Boolean
  ): Users

  deleteUser(id: ID!): Users

  editUser(
    userId: ID!
    firstName: String
    lastName: String
    email: String
    username: String
    profileImage: String
    coverImage: String
    isSuperAdmin: Boolean
    softDelete: Boolean
  ): Users

  createSpace(
    userOwner: ID!
    name: String!
    description: String!
    accessCode: String!

    coverImage: String!
  ): Spaces

  deleteSpace(id: ID!): Spaces

  editSpace(
    spaceId: ID!
    name: String
    description: String
    accessCode: String
    coverImage: String
  ): Spaces

  createRoom(
    spaceOwnerId: ID!
    name: String!
    description: String!
    coverImage: String!
  ): Rooms

  deleteRoom(id: ID!): Rooms

  editRoom(
    name: String
    description: String
    coverImage: String
    roomId: ID!
  ): Rooms

  createTask(
    roomOwnerId: ID!
    title: String!
    description: String
    status: Int
    deadline: String
    assignedToIds: [ID]
    longDescription: String
  ): Tasks

  deleteTask(taskId: ID!, roomId: ID!): Tasks

  editTask(
    taskId: ID!
    roomId: ID!
    title: String
    description: String
    status: Int
    deadline: String
    assignedToIds: [ID]
    longDescription: String
  ): Tasks

  joinSpace(spaceId: ID!, userId: ID!): Spaces

  leaveSpace(spaceId: ID!, userId: ID!): Spaces

  createSession(email: String!, password: String!): Sessions

  createMessage(userId: ID!, chatId: ID!, content: String!): Messages

  changeUserRole(userId: ID!, spaceId: ID!, role: String!): Spaces

  changePassword(userId: ID!, oldPassword: String!, newPassword: String!): Users

  deleteFile(fileId: ID!, spaceId: ID!): Files

  createComment(
    taskId: ID!
    roomId: ID!
    content: String!
    userId: ID!
  ): Comments
}

type Subscription {
  notifyTaskCreated(roomId: ID!): Tasks
  notifyTaskChanged(roomId: ID!): Tasks
  notifyTaskDeleted(roomId: ID!): Tasks
  notifyMessageCreated(chatId: ID!): Messages
}
